1. venv
python3 -m venv venv
source venv/bin/activate

2. +файл requirements.txt
asgiref==3.6.0
Django==4.2.1
sqlparse==0.4.4

3. 
pip install -r requirements.txt
pip install drf_yasg
---
sudo apt update
pip install --upgrade pip

4. создание проекта
django-admin startproject core .
python manage.py startapp accounts


--- ACCOUNTS ---

1. +файл accounts/serializers.py

from rest_framework import serializers
from django.contrib.auth.models import User


class UserSerializer(serializers.ModelSerializer):
    first_name = serializers.CharField(write_only=True, required=True)
    last_name = serializers.CharField(write_only=True, required=True)
    email = serializers.EmailField(write_only=True, required=True)

    class Meta:
        model = User
        fields = ["username", "password", "first_name", "last_name", "email"]
        extra_kwargs = {"password": {"write_only": True}}

    def create(self, validated_data):
        return User.objects.create_user(**validated_data)


class LoginSerializer(serializers.Serializer):
    username = serializers.CharField(required=True)
    password = serializers.CharField(required=True, write_only=True)


2. +файл accounts/views.py

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from accounts.serializers import UserSerializer, LoginSerializer
from django.contrib.auth import authenticate, login, logout
from drf_yasg.utils import swagger_auto_schema


class UserRegistrationAPIView(APIView):
    permission_classes = [AllowAny]

    @swagger_auto_schema(request_body=UserSerializer)
    def post(self, request):
        serializer = UserSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class UserLoginAPIView(APIView):
    permission_classes = [AllowAny]

    @swagger_auto_schema(request_body=LoginSerializer)
    def post(self, request):
        username = request.data.get("username")
        password = request.data.get("password")
        user = authenticate(username=username, password=password)
        if user:
            login(request, user)
            return Response(
                {"message": "User logged in successfully"}, status=status.HTTP_200_OK
            )
        return Response(
            {"error": "Authentication failed"}, status=status.HTTP_401_UNAUTHORIZED
        )


class UserLogoutAPIView(APIView):
    def post(self, request):
        logout(request)
        return Response(
            {"message": "User logged out successfully"}, status=status.HTTP_200_OK
        )

    def get(self, request):
        logout(request)
        return Response(
            {"message": "User logged out successfully"}, status=status.HTTP_200_OK
        )

3. +файл accounts/urls.py

from django.urls import path
from .views import (
    UserRegistrationAPIView,
    UserLoginAPIView,
    UserLogoutAPIView,
)

urlpatterns = [
    path("register/", UserRegistrationAPIView.as_view(), name="user_registration"),
    path("login/", UserLoginAPIView.as_view(), name="user_login"),
    path("logout/", UserLogoutAPIView.as_view(), name="user_logout"),
]

4. файл core/urls.py
from django.urls import path, include
path('accounts/', include(('accounts.urls', 'accounts'))),

5. файл core/settings.py

в installed apps:
'accounts',
'rest_framework', 

в конце файла
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
}

6. миграции
python manage.py makemigrations
python manage.py migrate

7. создание супер пользователя
python manage.py createsuperuser

8. запуск 
python manage.py runserver

9. DBeaver
Файл → Создать → Новое подключение.
В списке бд выбрать SQLite.
Указать путь до файла db.sqlite3

10. API

--register
http://127.0.0.1:8000/accounts/register/
{
  "username": "example_user",
  "password": "example_password",
  "first_name": "example_first_name",
  "last_name": "example_last_name",
  "email": "example@example.com"
}


--login
http://127.0.0.1:8000/accounts/login/
{
  "username": "example_user",
  "password": "example_password"
}

--logout
http://127.0.0.1:8000/accounts/logout/


--- BOOKS ---

1. создание проекта
python manage.py startapp books

2. +файл books/models.py
Если поле необязательное: blank=True, null=True.

from django.db import models
from django.contrib.auth.models import User


class Author(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name


class Genre(models.Model):
    name = models.CharField(max_length=50)
    description = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name


class Book(models.Model):
    BOOK_TYPE_CHOICES = [
        ("book", "Книга"),
        ("magazine", "Журнал"),
        ("comic", "Комикс"),
        ("other", "Другое"),
    ]
    title = models.CharField(max_length=100)
    type = models.CharField(max_length=20, choices=BOOK_TYPE_CHOICES, default="other")
    volume = models.PositiveIntegerField()
    year = models.PositiveIntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    genres = models.ManyToManyField(Genre, blank=True)
    authors = models.ManyToManyField(Author, blank=True)
    owner = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return self.title

3. draw.io
https://drive.google.com/file/d/1BmDHx-sWIyymsgSeF2T4be5_Wz1s-y56/view?usp=sharing

4. +файл books/serializers.py

from rest_framework import serializers
from .models import Author, Book, Genre


class AuthorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Author
        fields = ["id", "name"]


class GenreSerializer(serializers.ModelSerializer):
    class Meta:
        model = Genre
        fields = ["id", "name", "description"]


class BookSerializer(serializers.ModelSerializer):
    class Meta:
        model = Book
        fields = [
            "id",
            "title",
            "type",
            "volume",
            "year",
            "description",
            "genres",
            "authors",
            "owner",
        ]


5. +файл books/views.py

from django.shortcuts import get_object_or_404
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .serializers import BookSerializer
from .models import Book
from rest_framework.permissions import IsAdminUser


class BookCreateAPIView(APIView):
    permission_classes = [IsAdminUser]

    def post(self, request):
        serializer = BookSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save(owner=request.user)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class BookListAPIView(APIView):
    def get(self, request):
        books = Book.objects.all()
        serializer = BookSerializer(books, many=True)
        return Response(serializer.data)


class BookDetailAPIView(APIView):
    def get(self, request, pk):
        book = get_object_or_404(Book, pk=pk)
        serializer = BookSerializer(book)
        return Response(serializer.data)

    def put(self, request, pk):
        self.permission_classes = [IsAdminUser]
        self.check_permissions(request)
        book = get_object_or_404(Book, pk=pk)
        serializer = BookSerializer(book, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request, pk):
        self.permission_classes = [IsAdminUser]
        self.check_permissions(request)
        book = get_object_or_404(Book, pk=pk)
        book.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)


class BookByGenreAPIView(APIView):
    def get(self, request, genre_id):
        books = Book.objects.filter(genres__id=genre_id)
        serializer = BookSerializer(books, many=True)
        return Response(serializer.data)

6. +файл books/urls.py

from django.urls import path
from .views import (
    BookCreateAPIView,
    BookListAPIView,
    BookDetailAPIView,
    BookByGenreAPIView,
)

app_name = "books"

urlpatterns = [
    path("create/", BookCreateAPIView.as_view(), name="book_create"),
    path("list/", BookListAPIView.as_view(), name="book_list"),
    path("detail/<int:pk>/", BookDetailAPIView.as_view(), name="book_detail"),
    path("genre/<int:genre_id>/", BookByGenreAPIView.as_view(), name="books_genre"),
]

7. +файл books/admin.py

from django.contrib import admin
from .models import Book
from .models import Author
from .models import Genre


admin.site.register(Book)
admin.site.register(Author)
admin.site.register(Genre)

8. файл core/urls.py
path("books/", include("books.urls")),

9. файл core/settings.py

в INSTALLED_APPS:
'books',

10. API
--all books
http://127.0.0.1:8000/books/list

--detail
http://127.0.0.1:8000/books/detail/1

--create
http://127.0.0.1:8000/books/create/

{
    "title": "Название 1",
    "type": "comic",
    "volume": 2000,
    "year": 2023,
    "description": "Описание 1", 
    "genres": [1],
    "authors": [1],
    "owner": 1
}

--genre
http://127.0.0.1:8000/books/genre/2/


--- SWAGGER ---

1. файл core/settings.py
INSTALLED_APPS:
"drf_yasg",

2. файл core/urls.py

from rest_framework.permissions import AllowAny
from drf_yasg import openapi
from drf_yasg.views import get_schema_view

schema_view = get_schema_view(
    openapi.Info(
        title="My API",
        default_version="v1",
        description="API документация",
    ),
    public=True,
    permission_classes=[AllowAny],
)

path("swagger/", schema_view.with_ui("swagger", cache_timeout=0), name="schema-swagger"),

3. View: Registration, Login, BookCreate, BookDetail

from drf_yasg.utils import swagger_auto_schema
перед def post/put
@swagger_auto_schema(request_body=BookSerializer)

--- TESTS ---

1. +файл accounts/tests.py

from django.test import TestCase, Client
from django.urls import reverse
from rest_framework import status
from django.contrib.auth.models import User


class UserLoginLogoutAPIViewTest(TestCase):
    def setUp(self):
        self.login_url = reverse('accounts:user_login')
        self.logout_url = reverse('accounts:user_logout')
        self.username = 'testuser'
        self.password = 'testpassword123'
        self.user = User.objects.create_user(
            username=self.username,
            password=self.password
        )

    def test_login_successful(self):
        response = self.client.post(self.login_url, {
            'username': self.username,
            'password': self.password
        })
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertIn('message', response.data)
        self.assertEqual(response.data['message'], 'User logged in successfully')

    def test_login_nonexistent_user(self):
        response = self.client.post(self.login_url, {
            'username': 'nonexistentuser',
            'password': 'nonexistenpassword'
        })
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
        self.assertIn('error', response.data)

    def authenticate(self):
        self.client.login(username='testuser', password='testpassword123')

    def test_post_logout_authenticated(self):
        self.authenticate()
        response = self.client.post(self.logout_url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['message'], 'User logged out successfully')

    def test_post_logout_unauthenticated(self):
        response = self.client.post(self.logout_url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)


2. команды

python manage.py test accounts.tests

pip install coverage

coverage run manage.py test

coverage report

3. +файл books/tests.py
python manage.py test books.tests

from django.test import TestCase
from django.urls import reverse
from rest_framework import status
from django.contrib.auth.models import User
from .models import Author, Book, Genre


class BookAPIViewTestCase(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username="test_user", password="password")
        self.admin_user = User.objects.create_user(
            username="admin_user", password="password", is_staff=True
        )
        self.author = Author.objects.create(name="Test Author")
        self.genre = Genre.objects.create(name="Test Genre")

        self.book_data = {
            "title": "Test Book",
            "type": "comic",
            "volume": 2000,
            "year": 2023,
            "description": "Test Description",
            "genres": [self.genre.id],
            "authors": [self.author.id],
        }

        self.book = Book.objects.create(
            title="Test Book",
            type="comic",
            volume="2000",
            year=2023,
            description="Test Description",
            owner=self.user,
        )
        self.book.authors.add(self.author)
        self.book.genres.add(self.genre)

        self.book_create_url = reverse("books:book_create")
        self.book_list_url = reverse("books:book_list")
        self.book_detail_url = reverse("books:book_detail", args=[self.book.id])
        self.book_update_url = reverse("books:book_detail", args=[self.book.id])

    def test_create_book_as_admin(self):
        self.client.login(username="admin_user", password="password")
        self.book_data["owner"] = self.user.id
        response = self.client.post(self.book_create_url, self.book_data, format="json")
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(response.data["title"], self.book_data["title"])

    def test_create_book_as_normal_user(self):
        self.client.login(username="test_user", password="password")
        response = self.client.post(self.book_create_url, self.book_data, format="json")
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_get_book_list(self):
        self.client.login(username="test_user", password="password")
        response = self.client.get(self.book_list_url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)

    def test_get_book_detail(self):
        self.client.login(username="test_user", password="password")
        response = self.client.get(self.book_detail_url)
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data["title"], self.book.title)

    def test_delete_book_as_admin(self):
        self.client.login(username="admin_user", password="password")
        response = self.client.delete(self.book_update_url)
        self.assertEqual(response.status_code, status.HTTP_204_NO_CONTENT)
        self.assertFalse(Book.objects.filter(id=self.book.id).exists())

    def test_delete_book_as_normal_user(self):
        self.client.login(username="test_user", password="password")
        response = self.client.delete(self.book_update_url)
        self.assertEqual(response.status_code, status.HTTP_403_FORBIDDEN)

    def test_get_books_by_genre(self):
        self.client.login(username="test_user", password="password")
        url = reverse("books:books_genre", args=[self.genre.id])
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
        self.assertEqual(response.data[0]["title"], self.book.title)


ЛИНТЕР

1. pip install flake8
flake8

2. +файл .flake8
[flake8]
exclude = venv/*
max-line-length = 138

3. pip install black
black .